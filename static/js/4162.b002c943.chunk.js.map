{"version":3,"file":"static/js/4162.b002c943.chunk.js","mappings":"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","sources":["views/enquery/ContinentList.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/card/CCardImage.tsx","../node_modules/@coreui/react/src/components/card/CCardText.tsx","../node_modules/@coreui/react/src/components/card/CCardTitle.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx"],"sourcesContent":["import React from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCardImage,\n  CCardText,\n  CCardTitle,\n  CCol,\n  CRow,\n} from '@coreui/react'\nimport Africa from \"../../Landing/assets/africa.png\"\nimport Asia from \"../../Landing/assets/asia.png\"\nimport Australia from \"../../Landing/assets/Australia.png\"\nimport SouthAmerica from \"../../Landing/assets/South_America.png\"\nimport Antarctica from \"../../Landing/assets/Antarctica.png\"\nimport Europe from \"../../Landing/assets/europe.png\"\nimport NorthAmerica from \"../../Landing/assets/North_America.png\"\n\nimport ReactImg from '../../../src/assets/images/react.jpg'\nimport { useNavigate } from 'react-router-dom'\n\nconst Cards = () => {\n\n  const navigate = useNavigate();\n\n  const handleDetailsClick = async(continent) => {\n    try{\n      navigate('/admin/enquery/list', { state: { continent: continent } });\n    } catch(error) {\n      console.log('error on institute list fetch =-> ', error)\n    }\n  }\n\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Continents</strong> <small>List</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Listed all continents here. You can go through each by clicking <b>&quot;Explore&quot;</b> button.\n            </p>\n\n            {/* <DocsExample href=\"components/card\"> */}\n            <CRow>\n              <CCol xs={4}>\n                <CCard style={{ width: '18rem', marginTop:'10px' }}>\n                  <CCardImage orientation=\"top\" src={Asia} style={{width:'200px', height:'200px', position:'relative', left:'15%', marginTop:'10px'}} />\n                  <CCardBody>\n                    <CCardTitle>Asia</CCardTitle>\n                    <CCardText>\n                    Asia is the largest continent in the world by both land area and population.\n                    </CCardText>\n                    <CButton color=\"primary\" onClick={() => handleDetailsClick('Asia')}>\n                      Explore\n                    </CButton>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n              <CCol xs={4}>\n                <CCard style={{ width: '18rem', marginTop:'10px' }}>\n                  <CCardImage orientation=\"top\" src={Africa} style={{width:'200px', height:'200px', position:'relative', left:'15%', marginTop:'10px'}} />\n                  <CCardBody>\n                    <CCardTitle>Africa</CCardTitle>\n                    <CCardText>\n                    Africa is the world&apos;s second-largest and second-most populous continent, after Asia in both aspects\n                    </CCardText>\n                    <CButton color=\"primary\" onClick={() => handleDetailsClick('Africa')}>\n                      Explore\n                    </CButton>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n              <CCol xs={4}>\n                <CCard style={{ width: '18rem', marginTop:'10px' }}>\n                  <CCardImage orientation=\"top\" src={Europe} style={{width:'200px', height:'200px', position:'relative', left:'15%', marginTop:'10px'}} />\n                  <CCardBody>\n                    <CCardTitle>Europe</CCardTitle>\n                    <CCardText>\n                      Europe is a continent comprising the westernmost peninsulas of Eurasia.\n                    </CCardText>\n                    <CButton color=\"primary\" onClick={() => handleDetailsClick('Europe')}>\n                      Explore\n                    </CButton>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n              <CCol xs={4}>\n                <CCard style={{ width: '18rem', marginTop:'30px' }}>\n                  <CCardImage orientation=\"top\" src={NorthAmerica} style={{width:'200px', height:'200px', position:'relative', left:'15%', marginTop:'10px'}} />\n                  <CCardBody>\n                    <CCardTitle>North America</CCardTitle>\n                    <CCardText>\n                      North America covers an area of about 24,709,000 square kilometers (9,540,000 square miles)\n                    </CCardText>\n                    <CButton color=\"primary\" onClick={() => handleDetailsClick('NorthAmerica')}>\n                      Explore\n                    </CButton>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n              <CCol xs={4}>\n                <CCard style={{ width: '18rem', marginTop:'30px' }}>\n                  <CCardImage orientation=\"top\" src={SouthAmerica} style={{width:'200px', height:'200px', position:'relative', left:'15%', marginTop:'10px'}} />\n                  <CCardBody>\n                    <CCardTitle>South America</CCardTitle>\n                    <CCardText>\n                      South America is a continent entirely in the Western Hemisphere and mostly in the Southern Hemisphere.\n                    </CCardText>\n                    <CButton color=\"primary\" onClick={() => handleDetailsClick('SouthAmerica')}>\n                      Explore\n                    </CButton>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n\n              <CCol xs={4}>\n                <CCard style={{ width: '18rem', marginTop:'30px' }}>\n                  <CCardImage orientation=\"top\" src={Australia} style={{width:'200px', height:'200px', position:'relative', left:'15%', marginTop:'10px'}} />\n                  <CCardBody>\n                    <CCardTitle>Australia</CCardTitle>\n                    <CCardText>\n                      Australia, officially the Commonwealth of Australia, is a sovereign country.\n                    </CCardText>\n                    <CButton color=\"primary\" onClick={() => handleDetailsClick('Australia')}>\n                      Explore\n                    </CButton>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n              </CRow>\n            {/* </DocsExample> */}\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Cards\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n}\n\nexport const CCardHeader = forwardRef<HTMLDivElement, CCardHeaderProps>(\n  ({ children, component: Component = 'div', className, ...rest }, ref) => {\n    return (\n      <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n        {children}\n      </Component>\n    )\n  },\n)\n\nCCardHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { ElementType, forwardRef, ImgHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardImageProps\n  extends ImgHTMLAttributes<HTMLImageElement | HTMLOrSVGElement | HTMLOrSVGImageElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n  /**\n   * Optionally orientate the image to the top, bottom, or make it overlaid across the card.\n   */\n  orientation?: 'top' | 'bottom'\n}\n\nexport const CCardImage = forwardRef<\n  HTMLImageElement | HTMLOrSVGElement | HTMLOrSVGImageElement,\n  CCardImageProps\n>(({ children, className, component: Component = 'img', orientation, ...rest }, ref) => {\n  return (\n    <Component\n      className={classNames(orientation ? `card-img-${orientation}` : 'card-img', className)}\n      {...rest}\n      ref={ref}\n    >\n      {children}\n    </Component>\n  )\n})\n\nCCardImage.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n  orientation: PropTypes.oneOf(['top', 'bottom']),\n}\n\nCCardImage.displayName = 'CCardImage'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardTextProps extends HTMLAttributes<HTMLParagraphElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n}\n\nexport const CCardText = forwardRef<HTMLParagraphElement, CCardTextProps>(\n  ({ children, component: Component = 'p', className, ...rest }, ref) => {\n    return (\n      <Component className={classNames('card-text', className)} {...rest} ref={ref}>\n        {children}\n      </Component>\n    )\n  },\n)\n\nCCardText.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n}\n\nCCardText.displayName = 'CCardText'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n}\n\nexport const CCardTitle = forwardRef<HTMLHeadingElement, CCardTitleProps>(\n  ({ children, component: Component = 'h5', className, ...rest }, ref) => {\n    return (\n      <Component className={classNames('card-title', className)} {...rest} ref={ref}>\n        {children}\n      </Component>\n    )\n  },\n)\n\nCCardTitle.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n}\n\nCCardTitle.displayName = 'CCardTitle'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n"],"names":["Cards","navigate","useNavigate","handleDetailsClick","async","state","continent","error","console","log","_jsx","CRow","children","CCol","xs","_jsxs","CCard","className","CCardHeader","CCardBody","style","width","marginTop","CCardImage","orientation","src","Asia","height","position","left","CCardTitle","CCardText","CButton","color","onClick","Africa","Europe","NorthAmerica","SouthAmerica","Australia","forwardRef","_a","ref","textColor","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","displayName","component","Component","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","length","col","sm","md","lg","xl","xxl","cols","gutter","gutterX","gutterY"],"sourceRoot":""}