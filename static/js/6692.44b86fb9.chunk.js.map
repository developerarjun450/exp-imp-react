{"version":3,"file":"static/js/6692.44b86fb9.chunk.js","mappings":"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","sources":["views/base/breadcrumbs/Breadcrumbs.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx"],"sourcesContent":["import React from 'react'\nimport {\n  CBreadcrumb,\n  CBreadcrumbItem,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CLink,\n} from '@coreui/react'\nimport { DocsExample } from '../../../../src/components'\n\nconst Breadcrumbs = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Breadcrumb</strong>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              The breadcrumb navigation provides links back to each previous page the user navigated\n              through and shows the current location in a website or an application. You don’t have\n              to add separators, because they automatically added in CSS through{' '}\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::before\">\n                {' '}\n                <code>::before</code>\n              </a>{' '}\n              and{' '}\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/content\">\n                {' '}\n                <code>content</code>\n              </a>\n              .\n            </p>\n            <DocsExample href=\"components/breadcrumb\">\n              <CBreadcrumb>\n                <CBreadcrumbItem>\n                  <CLink href=\"#\">Home</CLink>\n                </CBreadcrumbItem>\n                <CBreadcrumbItem active>Library</CBreadcrumbItem>\n              </CBreadcrumb>\n              <CBreadcrumb>\n                <CBreadcrumbItem>\n                  <CLink href=\"#\">Home</CLink>\n                </CBreadcrumbItem>\n                <CBreadcrumbItem>\n                  <CLink href=\"#\">Library</CLink>\n                </CBreadcrumbItem>\n                <CBreadcrumbItem active>Data</CBreadcrumbItem>\n              </CBreadcrumb>\n              <CBreadcrumb>\n                <CBreadcrumbItem>\n                  <CLink href=\"#\">Home</CLink>\n                </CBreadcrumbItem>\n                <CBreadcrumbItem>\n                  <CLink href=\"#\">Library</CLink>\n                </CBreadcrumbItem>\n                <CBreadcrumbItem>\n                  <CLink href=\"#\">Data</CLink>\n                </CBreadcrumbItem>\n                <CBreadcrumbItem active>Bootstrap</CBreadcrumbItem>\n              </CBreadcrumb>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Breadcrumbs\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n}\n\nexport const CCardHeader = forwardRef<HTMLDivElement, CCardHeaderProps>(\n  ({ children, component: Component = 'div', className, ...rest }, ref) => {\n    return (\n      <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n        {children}\n      </Component>\n    )\n  },\n)\n\nCCardHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n"],"names":["Breadcrumbs","_jsx","CRow","children","CCol","xs","_jsxs","CCard","className","CCardHeader","CCardBody","href","DocsExample","CBreadcrumb","CBreadcrumbItem","CLink","active","forwardRef","_a","ref","color","textColor","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","displayName","component","Component","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","length","col","sm","md","lg","xl","xxl","cols","gutter","gutterX","gutterY"],"sourceRoot":""}